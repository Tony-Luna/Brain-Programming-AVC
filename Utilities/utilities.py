# -*- coding: utf-8 -*-
"""Utilities.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tTPlIQ1li-mpEiwfwyTFpK6rpUTb15Oq
"""

import numpy as np
import os
import matplotlib.pyplot as plt
from skimage import io

import pickle


# Safe division ----------------------------------------------------------------
def safe_divide(a,b):
    return np.divide(a, b, out=np.zeros_like(a), where=b!=0)

# Linearize input array with values in the range of 0-1-------------------------
def linear_normalization(arr):
    min_val = np.min(arr)
    max_val = np.max(arr)
    
    a = np.subtract(arr, min_val)
    b = np.subtract(max_val, min_val)
    normalized_arr = safe_divide(a,b)
    
    return normalized_arr  

# Function to display 2 or 3 channel image easily ------------------------------
def display_image(img, title, cmap='gray'):
    plt.figure()
    if len(img.shape) == 2:
        plt.imshow(img, cmap=cmap)
    else:
        plt.imshow(img)
        
    plt.axis('off')
    plt.title(title)
    plt.show()

# Function to display 2 or 3 channel image row easily --------------------------
def display_image_row(imgs, titles, cmap='gray', super_t = ''):
    cols = len(imgs)
    
    fig, ax = plt.subplots(1, cols) #, figsize=(10, 10), sharex=True, sharey=True)
    fig.suptitle(super_t, size=16) 
    
    for i in range(cols):
        img = imgs[i]
      
        if len(img.shape) == 2:
            ax[i].imshow(img, cmap=cmap)
        else:
            ax[i].imshow(img)
      
        # ax[i].set_title(titles[i])
    
    for a in ax.ravel():
        a.set_axis_off()
    
    fig.tight_layout()
    fig.subplots_adjust(top=1.3)
    plt.show()
    
# Function to display 2 or 3 channel image row easily --------------------------
def display_image_col(imgs, titles, cmap='gray', super_t = ''):
    rows = len(imgs)
    
    fig, ax = plt.subplots(rows, 1) #, figsize=(10, 10), sharex=True, sharey=True)
    fig.suptitle(super_t, size=16) 
    
    for i in range(rows):
        img = imgs[i]
      
        if len(img.shape) == 2:
            ax[i].imshow(img, cmap=cmap)
        else:
            ax[i].imshow(img)
    
    for a in ax.ravel():
        a.set_axis_off()
    
    fig.tight_layout()
    fig.subplots_adjust(top=1.3)
    plt.show()

# Functions to load images from a dataset ---------------------------------------
class MyDataset:
    def __init__(self, class_names, img_dir):
        self.class_names = class_names
        self.img_dir = img_dir
        self.data = []
        self.targets = []
    
    def __len__(self):
        return len(self.targets)
    
    def __getitem__(self, idx):
        label_id = self.targets[idx]
        image = io.imread(self.img_dir + '/' + self.class_names[label_id] +'/' + self.data[idx])
        
        return image

# Function to load train/val/test paths list from folder:
def load_data(dataset_path, data_splits=[30, 20, 20], n_classes=None):
    classes_names = sorted([i for i in os.listdir(dataset_path) if '.' not in i])
    
    if n_classes is not None:
        classes_names = classes_names[0:n_classes]
      
    print('Classes: ', classes_names)
    
    train_set = MyDataset(classes_names, dataset_path)
    val_set = MyDataset(classes_names, dataset_path)
    test_set = MyDataset(classes_names, dataset_path)
    
    for idx, c in enumerate(classes_names):
        c_path = os.path.join(dataset_path, c)
        total_images = os.listdir(c_path)
        
        if all(isinstance(i, int) for i in data_splits) or all(i > 1 for i in data_splits):
            n_train = data_splits[0]
            n_val = data_splits[1]
            n_test = data_splits[2]
        elif all(isinstance(i, float) for i in data_splits) or all(i <= 1 for i in data_splits):
            total_images_count = len(total_images)
            n_train = int(total_images_count * data_splits[0])
            n_val = int(total_images_count * data_splits[1])
            n_test = total_images_count - n_train - n_val
    
        train_set.data = [*train_set.data, *total_images[0:n_train]]
        train_set.targets = [*train_set.targets, *[idx for _ in range(n_train)]]
    
        val_set.data = [*val_set.data, *total_images[n_train:n_train + n_val]]
        val_set.targets = [*val_set.targets, *[idx for _ in range(n_val)]]
    
        test_set.data = [*test_set.data, *total_images[n_train + n_val:n_train + n_val + n_test]]
        test_set.targets = [*test_set.targets, *[idx for _ in range(n_test)]]
    
    print('Training images: {}'.format(len(train_set)))
    print('Validation images: {}'.format(len(val_set)))
    print('Test images: {}'.format(len(test_set)))
    
    return train_set, val_set, test_set


def check_create_dir(dir):
    if not os.path.exists(dir):
        os.makedirs(dir)
    else:
        pass
  
def load_pickle_obj(file):
    obj = None
    with open(file, 'rb') as obj_path:
        obj = pickle.load(obj_path)
        
    return obj